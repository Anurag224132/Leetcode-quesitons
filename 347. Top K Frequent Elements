/*
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

*/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> mp=new HashMap<>();
        for(int i:nums){
            mp.put(i,mp.getOrDefault(i,0)+1);
        }
        int[][] arr=new int[nums.length][2];
        int i=0;
        for(Map.Entry<Integer,Integer> en:mp.entrySet()){
            arr[i][0]=en.getKey();
            arr[i][1]=en.getValue();
            i++;
        }
        Arrays.sort(arr,(a,b)->b[1]-a[1]);
        int[] ans=new int[k];
        for(int j=0;j<k;j++){
            ans[j]=arr[j][0];
        }
        return ans;
    }
}
