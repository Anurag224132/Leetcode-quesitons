/*  
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 

Example 1:


Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Example 2:

Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.
Example 3:

Input: root = [], key = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-105 <= Node.val <= 105
Each node has a unique value.
root is a valid binary search tree.
-105 <= key <= 105

*/




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void fun(TreeNode root, int k) {
        if (root == null)
            return;
        if (k < root.val) {
            if (root.left == null)
                return;
            if (root.left.val == k) {
                TreeNode l = root.left;
                if (l.left == null && l.right == null)
                    root.left = null; // 0 child
                else if (l.left == null || l.right == null) {// 1 child
                    if (l.left != null)
                        root.left = l.left;
                    else
                        root.left = l.right;
                } else {
                    TreeNode curr = l;
                    TreeNode pred = curr.left;
                    while (pred.right != null)
                        pred = pred.right;
                    fun(root, pred.val);
                    pred.left = curr.left;
                    pred.right = curr.right;
                    root.left = pred;
                }
            } else {
                fun(root.left, k);
            }

        } else {
            if (root.right == null)
                return;
            if (root.right.val == k) {
                TreeNode l = root.right;
                if (l.left == null && l.right == null)
                    root.right = null; // 0 child
                else if (l.left == null || l.right == null) {// 1 child
                    if (l.left != null)
                        root.right = l.left;
                    else
                        root.right = l.right;
                } else {
                    TreeNode curr = l;
                    TreeNode pred = curr.left;
                    while (pred.right != null)
                        pred = pred.right;
                    fun(root, pred.val);
                    pred.left = curr.left;
                    pred.right = curr.right;
                    root.right = pred;
                }
            } else {
                fun(root.right, k);
            }
        }
    }

    public TreeNode deleteNode(TreeNode root, int key) {

        TreeNode temp = new TreeNode(Integer.MAX_VALUE);
        temp.left = root;
        fun(temp, key);
        root = temp.left;
        return root;
    }
}
